read args
detecting PHI coordinates
Initializing Philter
map_regex(): searching for pattern with index 0 "ucsf apex safe" is re.compile('\\b(?i)(per|in|see|of|to|into)\\sapex\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 1 "ucsf MyChart safe" is re.compile('\\bMyChart\\b')
map_regex(): searching for pattern with index 2 "hospital safe" is re.compile('\\b([O|o](bstetric|BSTETRIC) [G|g](ynocology|YNECOLOGY) [C|c](enter|ENTER)|[E|e](xtended|XTENDED) [C|c](are|ARE) [F|f](acility|ACILITY)|[E|e](mergency|MERGENCY) [D|d](epartment|EPARTMENT)|[C|c](ommun)
map_regex(): searching for pattern with index 3 "wheezes safe" is re.compile('\\bwheezes\\b')
map_regex(): searching for pattern with index 4 "days safe" is re.compile('(?i)\\b([0-9]+|one|two|three|four|five|six|seven|eight|nine|ten|few|several|couple[ ]{1,2}of)[ ]{1,2}days\\b(?!\\sold\\b)', re.IGNORECASE)
map_regex(): searching for pattern with index 5 "assessment and plan safe" is re.compile('\\b(?i)assessment\\s&\\splan\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 6 "male safe" is re.compile('\\b(?i)((year|yr\\.)[ ]{1,2}old|y\\.o(\\.)?|yo|y\\/o|year\\-old|adult|young|middle-aged|elderly)[ ]{1,2}(male|man)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 7 "bp safe" is re.compile('\\b(?i)bp(\\:)?([ ]{1,2})?([6-9][0-9]|1[0-9][0-9])\\/([2-9][0-9]|1[0-9][0-9])\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 8 "units safe" is re.compile('\\b(?i)(?<!U #: )(?<!MRN:  )(?<!AARP#:  )(?<!AARP#: )(?<!MRN: )(?<!CIM # )(?<![A-Z]{2}  )(?<![A-Z]{2} )\\d{5,}([ ]{1,2})?(?!u\\#)(?!unit\\#)(?!units\\#)(?!u\\/s)(?!u\\/a)(u|units|unit)\\b(?! [A-Z]\\b, re.IGNORECASE)
map_regex(): searching for pattern with index 9 "tablet safe" is re.compile('\\b(?i)1\\/2([ ]{1,2})(tab|tablet|tablet\\(s\\))\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 10 "pain safe" is re.compile('\\b((?i)pain[ ]{1,2}((is|was|as)( a)? )?\\d\\/10)\\b|\\b((?i)\\d\\/10[ ]{1,2}pain)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 11 "able to safe" is re.compile('\\b(?i)able to\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 12 "attending safe" is re.compile('\\b(?i)attending\\s([a-z]+ologist(\\was)?|physician(\\swas)?|performed(\\sthe)?)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 13 "active safe" is re.compile('\\b(?i)((is|more|otherwise|very|not|sexually)\\sactive)|(active\\s(bleeding|problem|issue(s)?|disease|infection|on))\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 14 "at measurement safe" is re.compile("\\b(?i)at\\s\\d+\\s(degrees|min(s)?|day(s)?|week(s)?|month(s)?|year(s)?|atm|o\\'clock|watts|psi)\\b", re.IGNORECASE)
map_regex(): searching for pattern with index 15 "age safe" is re.compile("\\b(?i)(?<!date of birth\\/)(?<!dob\\/)(age(:)?\\s((?!9[0-9]|1[0-9]{2})\\d+)|(is|at|the|given|gestational|maternal|patient\\'s|baby\\'s)\\sage|age\\s(is|of|limit|appropriate|data))\\b", re.IGNORECASE)
map_regex(): searching for pattern with index 16 "airway safe" is re.compile('\\b(?i)airway(:)?\\s(suctioned|patent|patency|techniques|negative|resistance|inspection)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 17 "alert safe" is re.compile('\\b(?i)(is|was|fully)\\salert\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 18 "a1c safe" is re.compile('\\b(?i)a1c\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 19 "AM safe" is re.compile('(?<!\\/)(?<!\\-)\\b((?i)(in(\\sthe)?|(\\d{1,2}:)?\\d{1,2}))\\sAM\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 20 "arms safe" is re.compile('\\b(?i)(upper|lower|right|left|alternate|your|her|his)\\sarm(s)?\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 21 "assessment safe" is re.compile('\\b(?i)(follow\\-up|normal)\\sassessment\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 22 "as safe" is re.compile('\\b(as\\s(well as|directed|needed)|(such)\\sas)\\b')
map_regex(): searching for pattern with index 23 "axis safe" is re.compile('\\b(?i)(cylinder|right|left)\\saxis\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 24 "baby safe" is re.compile('\\b(?i)(your)\\sbaby\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 25 "back safe" is re.compile('\\b(?i)(back\\s(pain|spasm(s)?|stretches|exam)|(come|call(s)?|upper|lower)\\sback)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 26 "bal safe" is re.compile('\\bBAL\\s\\d+(ml|ML)\\b')
map_regex(): searching for pattern with index 27 "balance safe" is re.compile('\\b(?i)(standing|sitting)\\sbalance\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 28 "barretts esophagus safe" is re.compile("\\b(?i)barrett\\'s\\sesophagus\\b", re.IGNORECASE)
map_regex(): searching for pattern with index 29 "base safe" is re.compile('\\b(?i)(base\\s(of)|(lung|skull|left|right)\\sbase)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 30 "be safe" is re.compile('\\b(?i)be\\s(sure|safe|careful|more|less|kind|sensitive)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 31 "bee safe" is re.compile('\\b(?i)((honey)\\sbee|bee\\s(venome|sting))\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 32 "beats safe" is re.compile('\\b(?i)(\\d+\\sbeats|beats\\s(per|of))\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 33 "below safe" is re.compile('\\b(?i)(listed|noted|indicated)\\sbelow\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 34 "bile safe" is re.compile('\\b(?i)bile\\s(duct(s)?|leak)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 35 "birth safe" is re.compile('b(?i)((at|since)\\sbirth|birth\\s(control|weight|mother|time|day))\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 36 "bruits safe" is re.compile('\\b(?i)bruits\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 37 "call safe" is re.compile('\\b(?i)(call\\s(the|from|back|about|for|your|me)|(please|to|phone)\\scall)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 38 "cancer safe" is re.compile('\\b(?i)(skin)\\scancer\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 39 "case safe" is re.compile('\\b(?i)((the|in|which|on|most|some)\\scase(s)?|case\\s(manager|summary))\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 40 "central safe" is re.compile('\\b(?i)central\\s(blood|line)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 41 "cava safe" is re.compile('\\b(?i)vena\\scava\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 42 "cd safe" is re.compile('\\bCD\\d{1,2}\\b')
map_regex(): searching for pattern with index 43 "cea safe" is re.compile('\\b(L|R|Left|Right|l|r|left|right)\\sCEA\\b')
map_regex(): searching for pattern with index 44 "chief safe" is re.compile('\\b(?i)chief\\s(complaint)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 45 "child safe" is re.compile('\\b(?i)(your|the)\\schild\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 46 "code safe" is re.compile('\\b(?i)activation\\scode\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 47 "commonly safe" is re.compile('\\b(?i)commonly\\s(known\\sas|seen\\sin)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 48 "colon safe" is re.compile('\\b(?i)colon\\s(cancer|ca|polyp(s)?)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 49 "CT safe" is re.compile('\\b(chest|Chest|CHEST|head|Head|Head|abdominal|Abdominal|ABDOMINAL)CT\\b')
map_regex(): searching for pattern with index 50 "contact safe" is re.compile('\\b(?i)contact\\s(me|information|info|your|the)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 51 "contractions safe" is re.compile("\\b(?i)(aren\\'t|couldn\\'t|didn\\'t|doesn\\'t|don\\'t|hadn\\'t|hasn\\'t|haven\\'t|isn\\'t|mightn\\'t|shouldn\\'t|wasn\\'t|weren\\'t|won\\'t|wouldn\\'t)\\b", re.IGNORECASE)
map_regex(): searching for pattern with index 52 "cord safe" is re.compile('\\b(?i)(vocal|spinal|cervical)\\scord(s)?\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 53 "crohn's diseases safe" is re.compile("\\b(?i)crohn\\'s\\sdisease\\b", re.IGNORECASE)
map_regex(): searching for pattern with index 54 "day safe" is re.compile('\\b(?i)(a|per|the|same|next|each|every|by)\\sday\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 55 "decimal range safe" is re.compile('\\b\\d{1,2}\\.\\d{1,2}\\-\\d{1,2}\\.\\d{1,2}\\b')
map_regex(): searching for pattern with index 56 "dial safe" is re.compile('\\b(?i)dial\\s911\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 57 "disposition safe" is re.compile('\\b(?i)(baseline|final|living)\\sdisposition\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 58 "distance safe" is re.compile('\\b(?i)((short|long|walking|at|a)\\sdistance|distance\\sof)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 59 "distensable safe" is re.compile('\\b(?i)(normally)\\sdistensable\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 60 "do safe" is re.compile('\\b(?i)do\\s(not|you|I)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 61 "doesn't safe" is re.compile("\\bdoesn\\'t\\b")
map_regex(): searching for pattern with index 62 "doppler safe" is re.compile('\\b(?i)doppler\\s(evidence|flow|study|evidence)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 63 "down syndrome safe" is re.compile("\\b(?i)down(\\'s)?\\ssyndrome\\b", re.IGNORECASE)
map_regex(): searching for pattern with index 64 "drop safe" is re.compile('\\b(?i)\\d\\sdrop\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 65 "due safe" is re.compile('\\b(?i)due\\s(to|for)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 66 "ED safe" is re.compile('\\b((in|IN|In|to|TO|To|the|THE|The|local|LOCAL|Local|from|FROM|From)\\s(ED|ER)|(ED|ER)\\svisit)\\b(?!\\-)')
map_regex(): searching for pattern with index 67 "edge safe" is re.compile('\\b(?i)(edge\\sof|(liver|lateral|distal|proximal|on)\\sedge)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 68 "ems safe" is re.compile('\\b(EMS(\\s(arrival|was\\scalled|gave))|((called|call)\\s)EMS)\\b')
map_regex(): searching for pattern with index 69 "effort safe" is re.compile('\\b(?i)effort\\snormal\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 70 "est safe" is re.compile('\\b(?i)level\\s\\d\\sest\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 71 "ekg safe" is re.compile('\\bEKG\\s&\\sRhythm\\b')
map_regex(): searching for pattern with index 72 "fall safe" is re.compile('\\b(?i)fall\\s(risk|from|on|precautions)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 73 "fax safe" is re.compile('\\b(?i)fax:', re.IGNORECASE)
<re.Match object; span=(0, 4), match='Fax:'>
map_regex(): searching for pattern with index 74 "few safe" is re.compile('\\b(?i)few\\s(seconds|minutes|hours|days|weeks|months|years)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 75 "fiber safe" is re.compile('\\b(?i)((dietary|in|of|added|more|high)\\sfiber|fiber\\s(rich|supplements))\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 76 "file safe" is re.compile('\\b(?i)on\\sfile\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 77 "floor safe" is re.compile('\\b(?i)(on the|to the|off the)\\sfloor\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 78 "flexion/extension safe" is re.compile('\\b(?i)(([a-z]+)?flexion|extension)\\s\\d\\/5\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 79 "found safe" is re.compile('\\b(?i)((were|was|is|results|data)\\sfound|found\\s(in|for))\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 80 "go safe" is re.compile('\\b(?i)go\\sto\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 81 "grade safe" is re.compile('\\b(?i)(low|high|mild|)(\\s|\\-)grade\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 82 "gross safe" is re.compile('\\b(?i)gross\\s(description|per)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 83 "index safe" is re.compile('\\b(?i)(mass|dose|in the)\\sindex\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 84 "measurement safe" is re.compile('\\b(?i)(?!\\d{3}\\-\\d{4}\\sl\\/m)((?<!\\/)(?<!U #: )(?<!MRN:  )(?<!MRN: )(?<![A-Z]{2}  )(?<![A-Z]{2} )(?<!\\d{3}\\-)(?<!\\(\\d{3}\\)\\s)\\d+(\\.\\d+)?(\\-\\d+(\\.\\d+)?)?\\s(?!ml\\/bed\\b)((kilo)?gr, re.IGNORECASE)
map_regex(): searching for pattern with index 85 "medication safe" is re.compile('\\b(?i)(avandia|avapro|niaspan)\\s\\d+(\\s)?mg\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 86 "hearing safe" is re.compile('\\b(?i)hearing\\s(loss|aid(s)?)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 87 "HENT safe" is re.compile('\\bHENT:')
map_regex(): searching for pattern with index 88 "hour safe" is re.compile('\\b(?i)(?<!\\-)(?!\\d{5})(\\d+)\\shour(s)?\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 89 "how safe" is re.compile('\\b(?i)how\\s(do|can|to|is|was)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 90 "id safe" is re.compile('\\b(?i)(visit|transplant|patient)\\sid\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 91 "independence safe" is re.compile('\\b(?i)level\\sof\\sindependence\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 92 "intake safe" is re.compile('\\b(?i)intake(\\/output|\\s\\d+(\\.\\d+)?\\sml)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 93 "key safe" is re.compile('\\b(?i)key\\s(portion(s)?|elements(s)?|part(s)?)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 94 "knee safe" is re.compile('\\b(?i)((left|right)\\sknee|knee\\s(pain|cartilage|brace))\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 95 "last safe" is re.compile('\\b(?i)last\\s\\d\\sencounters\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 96 "lb safe" is re.compile('(?<!\\.\\d{2}\\.)\\b(?i)\\d+\\slb(s)?\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 97 "lab safe" is re.compile('\\b(?i)(lab\\sresults|stat\\slab)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 98 "learn safe" is re.compile('\\b(?i)(to|will|you)\\slearn\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 99 "loop safe" is re.compile('\\b(?i)flow\\-volume\\sloop\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 100 "max safe" is re.compile('\\b(?i)max:(\\s)?\\d+\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 101 "mac safe" is re.compile('\\bMAC\\smg\\b')
map_regex(): searching for pattern with index 102 "may safe" is re.compile('\\b(?i)may\\s(also|have|need|be)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 103 "medical safe" is re.compile('\\b(?i)medi\\-cal\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 104 "md safe" is re.compile('\\b(?<!\\b\\d{8}\\s)(M\\.D\\.(\\,)?(?=\\s\\d{5})|MD\\b)')
map_regex(): searching for pattern with index 105 "mono safe" is re.compile('\\%(\\s{1,2})?(MONO|MONOS|Mono|Monos)\\b')
map_regex(): searching for pattern with index 106 "micro safe" is re.compile('\\b(?i)micro\\ssource\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 107 "morning safe" is re.compile('\\b(?i)((the|this|every)\\smorning|morning\\sof)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 108 "mri safe" is re.compile('\\b(?i)brain\\smri\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 109 "na safe" is re.compile('\\b(?i)na\\s\\d+\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 110 "night safe" is re.compile('\\b(?i)((the|at|last|good|from|)\\snight|night\\s(sweats))\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 111 "non safe" is re.compile('\\b(?i)non\\-[a-z]+\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 112 "not safe" is re.compile('\\b(?i)(is|was|are|do)\\snot\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 113 "onset safe" is re.compile('\\b(?i)age\\sof\\sonset\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 114 "other safe" is re.compile('\\b(?i)other\\stopics\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 115 "pap safe" is re.compile('\\b(?i)pap\\s(smear(s)?|result(s)?)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 116 "parkinson safe" is re.compile("\\b(?i)parkinson(\\')?(s)?\\sdisease\\b", re.IGNORECASE)
map_regex(): searching for pattern with index 117 "pounds safe" is re.compile('\\b(?i)\\d+\\spounds\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 118 "ROS safe" is re.compile('\\bROS:')
map_regex(): searching for pattern with index 119 "scope safe" is re.compile('\\b(?i)the\\sscope\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 120 "sao2 safe" is re.compile('\\bSaO2(\\%)?:\\s\\d{2,3}\\b')
map_regex(): searching for pattern with index 121 "the safe" is re.compile('\\b(?i)(to|in|on)\\sthe\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 122 "UTI safe" is re.compile('\\bUTI(s)?\\b')
map_regex(): searching for pattern with index 123 "sci notation safe" is re.compile('\\b(?i)\\d+(\\.\\d)?(\\s)?x10e\\d+\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 124 "time range safe" is re.compile('(?i)(?<!\\/)(?<!age\\s)(?<!age:\\s)(?<!U #: )(?<!MRN:  )(?<!MRN: )(?<!\\d{3}\\-)\\b(in\\s)?\\d+((\\-|\\sto\\s)\\d+)?\\s(second(s)?|minute(s)?|day(s)|week(s)|month(s)|year(s)|times)\\b(?!\\savenue)(?!, re.IGNORECASE)
map_regex(): searching for pattern with index 125 "young safe" is re.compile('\\b(?i)young\\s(adult(s)?|age)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 126 "oral safe" is re.compile('\\b(?i)(\\d+\\s(mg|g|unit|units|tablet|tablets)(\\,)?\\soral|oral\\s(\\d+x\\s)?(daily|bedtime|cavity|instructions|take by mouth|take \\d+|class|phase|intake|motor|surgery|swab|dosage|pharynx))\\b|\\(, re.IGNORECASE)
map_regex(): searching for pattern with index 127 "ordering md safe" is re.compile('\\b(?i)(ordering|referring|reviewing|assisting)\\smd\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 128 "order md safe" is re.compile('\\b(?i)order\\smd\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 129 "peak safe" is re.compile('\\b(?i)min\\sprn\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 130 "prn safe" is re.compile('\\b(?i)peak\\sraw\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 131 "reviewed by safe" is re.compile('\\b(?i)date\\sreviewed\\sby\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 132 "smoking safe" is re.compile('\\b(?i)smoking\\sstatus\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 133 "full street address" is re.compile("(?i)(?<!(\\/|\\-|\\.))(?<!(\\stype\\s))(?<!(\\spulse\\s))(?<!(\\spulse\\sis\\s))(?<!(\\srate\\s))(?<!(\\srate\\sis\\s))(?<!(\\sratio\\sof\\s))(?!\\d+\\s(mg|g|c|am|units|capsule|capsules|month|months|, re.IGNORECASE)
map_regex(): searching for pattern with index 134 "full street address with concatenated street indicator" is re.compile('(?i)(?<!(\\/|\\-|\\.))(?<!(\\stype\\s))(?<!(\\spulse\\s))(?<!(\\spulse\\sis\\s))(?<!(\\srate\\s))(?<!(\\srate\\sis\\s))(?<!(\\sratio\\sof\\s))(?!\\d+\\s(mg|units|capsule|capsules|month|months|year|ye, re.IGNORECASE)
map_regex(): searching for pattern with index 135 "number streetname city" is re.compile('(?i)(?<!(\\/|\\-|\\.))(?<!(\\stype\\s))(?<!(\\spulse\\s))(?<!(\\spulse\\sis\\s))(?<!(\\srate\\s))(?<!(\\srate\\sis\\s))(?<!(\\sratio\\sof\\s))(?!\\d+\\s(mg|units|capsule|capsules|month|months|year|ye, re.IGNORECASE)
map_regex(): searching for pattern with index 136 "hospital name 1" is re.compile("\\b((([A-Z][a-zA-Z]+(\\'s)?)(([ ]{1,2}|\\-)([a-zA-Z]+)))|([a-zA-Z]+(\\'s)?)(([ ]{1,2}|\\-)([A-Z][a-zA-Z]+))|[A-Z][a-zA-Z]+)([ ]{1,2}[O|o](bstetric|BSTETRIC) [G|g](ynocology|YNECOLOGY) [C|c](enter|ENT)
map_regex(): searching for pattern with index 137 "hospital name 2" is re.compile("\\b(?!The\\b)((([A-Z][a-zA-Z]+\\-)?([A-Z][a-zA-Z]+(\\'s)?)(([ ]{1,2}|\\-)([a-zA-Z]+)))|([a-zA-Z]+(\\'s)?)(([ ]{1,2}|\\-)([A-Z][a-zA-Z]+))|[A-Z][a-zA-Z]+)([ ]{1,2}[M|m](edical|EDICAL) [C|c](enter|ENTE)
map_regex(): searching for pattern with index 138 "number streetname noindicator suite" is re.compile('(?i)(?<!(\\/|\\-))(?<!(\\stype\\s))(?<!(\\spulse\\s))(?<!(\\spulse\\sis\\s))(?<!(\\srate\\s))(?<!(\\srate\\sis\\s))(?<!(\\sgrade\\s))(?<!(\\splus\\s))(?<!(\\sratio\\sof\\s))(?<!(\\sTSH\\sof\\s\\d\\.), re.IGNORECASE)
map_regex(): searching for pattern with index 139 "number streetname city state" is re.compile('(?<!(\\/))(?<!(\\stype\\s))(?!\\d+\\s(mg|units|year|years|yrs|qd|bpm|refills|tab|tabs|day|days|cc|ccs|mmhg|po|puff|mm|amp)\\s)\\b(\\d+)\\s{1,4}(?!Dear\\b)([A-Z]\\s{1,4}[A-Z][a-zA-Z]+|[A-Z][a-zA-Z]+\\)
map_regex(): searching for pattern with index 140 "number streetname extension?" is re.compile('(?i)\\b(?<!(\\/|\\-|\\:))(?!\\d+\\s(mg|units|year|years|yrs|qd|bpm|refills|tab|tabs|day|days|cc|ccs|mmhg|po|mm)\\s)\\b(\\d+)[ ]{1,4}([A-Z][a-zA-Z]+[ ]{1,4}[A-Z][a-zA-Z]+|[A-Z][a-zA-Z]+|[A-Z]|(1st|2nd, re.IGNORECASE)
map_regex(): searching for pattern with index 141 "number streetname san" is re.compile('\\b\\d+\\s[A-Z][a-zA-Z]+\\s(San|SAN)\\b')
map_regex(): searching for pattern with index 142 "number streetname" is re.compile('(?i)(?<!(\\/))(?<!(\\d{2}\\-))(?<!(\\stype\\s))(?!\\d+\\s(mg|units|year|years|yrs|qd|bpm|refills|tab|tabs|day|days|cc|ccs|mmhg|po|puff|mm|amp)\\s)\\b((\\d+)\\s{1,4}(?!Dear\\b)([A-Z]\\s{1,4}[A-Z][a-zA, re.IGNORECASE)
map_regex(): searching for pattern with index 143 "corner of street & street" is re.compile('\\b(((?i)[a-z]+\\s(of|at|from)(\\sthe)?)\\s)([A-Z][a-zA-Z]+|((?i)(1st|2nd|3rd|4th|5th|6th|7th|8th|9th|10th|11th|12th|13th|14th|15th|16th|17th|18th|19th|20th|21st|22nd|23rd|24th|25th|26th|27th|28th|29, re.IGNORECASE)
map_regex(): searching for pattern with index 144 "street and street" is re.compile('\\b([A-Z][a-zA-Z]+|((?i)[a-z]+\\sof\\s)?((?i)(1st|2nd|3rd|4th|5th|6th|7th|8th|9th|10th|11th|12th|13th|14th|15th|16th|17th|18th|19th|20th|21st|22nd|23rd|24th|25th|26th|27th|28th|29th|30th|31st|32nd|33, re.IGNORECASE)
map_regex(): searching for pattern with index 145 "at street number dash street" is re.compile('\\b(?<=(?i)at\\s)\\d+\\s([A-Z][a-zA-Z]+(\\s)?){1,3}\\/(1st|2nd|3rd|4th|5th|6th|7th|8th|9th|10th|11th|12th|13th|14th|15th|16th|17th|18th|19th|20th|21st|22nd|23rd|24th|25th|26th|27th|28th|29th|30th|31s, re.IGNORECASE)
map_regex(): searching for pattern with index 146 "at dash street" is re.compile('\\b(?<=(?i)at\\s)([A-Z][a-zA-Z]+|((?i)(1st|2nd|3rd|4th|5th|6th|7th|8th|9th|10th|11th|12th|13th|14th|15th|16th|17th|18th|19th|20th|21st|22nd|23rd|24th|25th|26th|27th|28th|29th|30th|31st|32nd|33rd|34th, re.IGNORECASE)
map_regex(): searching for pattern with index 147 "short street name" is re.compile('\\b(?<=(?i)at\\s)([A-Z][a-zA-Z]+\\s{1,4}[A-Z][a-zA-Z]+|[A-Z][a-zA-Z]+|[A-Z])\\s(alley|alley|ally|aly|anex|annex|annx|anx|apartment|apt|avenue|ave|aven|avenu|avenue|avn|avnue|bayou|bayou|beach|beach|b, re.IGNORECASE)
map_regex(): searching for pattern with index 148 "streetname floor number" is re.compile('\\b(?i)(\\d+)\\s{1,4}([A-Z][a-zA-Z]+\\s{1,4}[A-Z][a-zA-Z]+|[A-Z][a-zA-Z]+|(1st|2nd|3rd|4th|5th|6th|7th|8th|9th|10th|11th|12th|13th|14th|15th|16th|17th|18th|19th|20th|21st|22nd|23rd|24th|25th|26th|27t, re.IGNORECASE)
map_regex(): searching for pattern with index 149 "city state zip" is re.compile('\\b(\\d+\\s[A-Z]\\s)?([a-zA-Z]+\\s{1,4}[a-zA-Z]+|[a-zA-Z]+)(\\:\\s{1,4}|\\,\\s{1,4}|\\.\\s{1,4}|\\s{1,4})((A|a)rizona|AZ|(V|v)irginia|VA|(M|m)innesota|MN|(A|a)laska|AK|(N|n)ew (Y|y)ork|NY|(T|t)exas|T)
map_regex(): searching for pattern with index 150 "city zip" is re.compile('\\b([a-zA-Z]+[ ]{1,4}(?!\\bPager\\b|\\bPAGER\\b|\\bpager\\b|\\bpage\\b|\\bpgr\\b|\\bpg\\b|\\bMD\\b)([a-zA-Z]+)|(?!\\bPager\\b|\\bPAGER\\b|\\bpager\\b|\\bpage\\b|\\bpgr\\b|\\bpg\\b|\\bMD\\b)([a-zA-Z]+)
map_regex(): searching for pattern with index 151 "lives in" is re.compile('\\b((?<=lives\\sin\\s|lives\\son\\s)|(?<=live\\sin\\s)|(?<=travel\\sto\\s)|(?<=travels\\sto\\s)|(?<=vacation\\sin\\s)|(?<=on\\sher\\sway\\sto\\s)|(?<=on\\shis\\sway\\sto\\s)|(?<=came\\sfrom\\s))([a-z)
map_regex(): searching for pattern with index 152 "city state" is re.compile('\\b(?!(NT\\,\\sND|MR\\,\\sLA)\\b)(([A-Z][a-zA-Z]+\\s{1,4}[A-Z][a-zA-Z]+|[A-Z][a-zA-Z]+)(\\,\\s{1,4})((A|a)rizona|AZ|(V|v)irginia|VA|(M|m)innesota|MN|(A|a)laska|AK|(N|n)ew (Y|y)ork|NY|(T|t)exas|TX|(V|)
map_regex(): searching for pattern with index 153 "county name" is re.compile('\\b(?i)([a-zA-Z]+\\s{1,4}[a-zA-Z]+|[a-zA-Z]+)\\scounty\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 154 "in city" is re.compile('\\b((?<=\\bin\\s)|(?<=\\bIN\\s)|(?<=\\bat\\s)|(?<=\\bnear\\s)|(?<=\\bfrom\\s)|(?<=\\btravel\\sto\\s)|(?<=\\bvisit\\sto\\s))((?!I\\b)(?!II\\b)(?!III\\b)(?!NAD\\b))([A-Z][a-z]+\\s[A-Z][a-z]+(\\s[A-Z][a)
map_regex(): searching for pattern with index 155 "city" is re.compile('\\b([A-Z][a-zA-Z]+\\s{1,4}[A-Z][a-zA-Z]+|[A-Z][a-zA-Z]+)\\s{1,4}(City|CITY|Street|STREET)\\b')
map_regex(): searching for pattern with index 156 "hospitalized at" is re.compile('\\b(?<=hospitalized at\\s)[A-Z][a-zA-Z]+((\\s|\\-)[A-Z][a-zA-Z]+)?((\\s|\\-)[A-Z][a-zA-Z]+)?\\b')
map_regex(): searching for pattern with index 157 "admission from" is re.compile('\\b(?<=admission from\\s|transferred to\\s|appointment at\\s)[A-Z][a-zA-Z]+((\\s|\\-)[A-Z][a-zA-Z]+)?((\\s|\\-)[A-Z][a-zA-Z]+)?\\b')
map_regex(): searching for pattern with index 158 "admitted from" is re.compile('\\b(?<=admitted from\\s|department at\\s)[A-Z][a-zA-Z]+((\\s|\\-)[A-Z][a-zA-Z]+)?((\\s|\\-)[A-Z][a-zA-Z]+)?\\b')
map_regex(): searching for pattern with index 159 "admission to" is re.compile('\\b(?<=admission to\\s|admission at\\s)[A-Z][a-zA-Z]+((\\s|\\-)[A-Z][a-zA-Z]+)?((\\s|\\-)[A-Z][a-zA-Z]+)?\\b')
map_regex(): searching for pattern with index 160 "admitted to 1" is re.compile('\\b(?<=admitted to\\s|admitted at\\s|transfer to\\s|referred to\\s)[A-Z][a-zA-Z]+((\\s|\\-)[A-Z][a-zA-Z]+)?((\\s|\\-)[A-Z][a-zA-Z]+)?\\b')
map_regex(): searching for pattern with index 161 "brought to" is re.compile('\\b(?<=brought to\\s|treated at\\s)[A-Z][a-zA-Z]+((\\s|\\-)[A-Z][a-zA-Z]+)?((\\s|\\-)[A-Z][a-zA-Z]+)?\\b')
map_regex(): searching for pattern with index 162 "taken to" is re.compile('\\b(?<=taken to\\s)[A-Z][a-zA-Z]+((\\s|\\-)[A-Z][a-zA-Z]+)?((\\s|\\-)[A-Z][a-zA-Z]+)?\\b')
map_regex(): searching for pattern with index 163 "admitted to 2" is re.compile('\\b(?<=sent to\\s|seen at\\s|seen in\\s|went to\\s|been at\\s)[A-Z][a-zA-Z]+((\\s|\\-)[A-Z][a-zA-Z]+)?((\\s|\\-)[A-Z][a-zA-Z]+)?\\b')
map_regex(): searching for pattern with index 164 "box room" is re.compile('\\b((?i)(suite|ste)?(\\.)?([ ]{1,2})?\\d+([ ]{1,2})?box(:)?[ ]{1,2}\\d+(,)?[ ]{1,2}[A-Z](\\-)?\\d+)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 165 "room box" is re.compile('\\b((?i)(room)?(:)?([ ]{1,2})?[A-Z](\\-)?\\d+(,)?[ ]{1,2}box(:)?[ ]{1,2}\\d+)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 166 "floor box" is re.compile('\\b(?i)(\\d+(th|nd|st)\\s{1,4}(floor|fl)|floor\\s[A-Z0-9]+)(\\,)?\\s((box|suite)\\s[a-zA-Z0-9]+|[A-Z]\\-[0-9]+)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 167 "desk #" is re.compile('\\b((?i)(reception\\s)?desk)\\s[a-zA-Z0-9]+\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 168 "pharmacy #" is re.compile("(?i)(?!your\\s)(?!sent\\sto\\s)(?!to\\syour\\s)(?!notes\\sto\\s)(?!called\\sto\\s)(?!to\\s)(?!by\\s)(?!the\\s)(?!per\\s)(?!from\\s)(?!another\\s)\\b(([A-Z][a-zA-Z]+\\-)?([A-Z][a-zA-Z]+(\\'s)?\\s)?[A-, re.IGNORECASE)
map_regex(): searching for pattern with index 169 "at location" is re.compile('\\b(?<=at\\s)(\\d+)\\s{1,4}(?!bpm\\b)(?!ccs\\b)(?!cc\\b)(?!pm\\b)(?!am\\b)(?!noon\\b)([A-Z][a-zA-Z]+\\s{1,4}[A-Z][a-zA-Z]+|[A-Z][a-zA-Z]+|[A-Z])\\b(?!\\.m\\.)')
map_regex(): searching for pattern with index 170 "number cardinal direction" is re.compile('(?i)\\b\\d+\\s(north|east|south|west)', re.IGNORECASE)
map_regex(): searching for pattern with index 171 "waiting room" is re.compile('\\b(?i)waiting room [a-zA-Z0-9]+\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 172 "to state" is re.compile('(?i)\\b(?<=(?i)to\\s)(?!\\bme\\b)((A|a)rizona|AZ|(V|v)irginia|VA|(M|m)innesota|MN|(A|a)laska|AK|(N|n)ew (Y|y)ork|NY|(T|t)exas|TX|(V|v)ermont|VT|(U|u)tah|UT|(N|n)ew (J|j)ersey|NJ|(N|n)orth (D|d)akota|, re.IGNORECASE)
map_regex(): searching for pattern with index 173 "state indicator" is re.compile('\\b(?i)(?!of\\shealth)((?<=state\\sof\\s)|(?<=state:\\s)|(?<=state\\s))[A-Z]{2}\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 174 "on streetname" is re.compile('\\b((?<=\\bon\\s)|(?<=\\bon\\s{2})|(?<=\\bin\\s)|(?<=\\bin\\s{2})|(?<=\\s\\@\\s)|(?<=\\s\\@\\s{2}))(?!(chest|abdominal|head)\\sCT\\b)([A-Z]\\s{1,4}[A-Z][a-zA-Z]+|[A-Z][a-zA-Z]+\\s{1,4}[A-Z][a-zA-Z]+|, re.IGNORECASE)
map_regex(): searching for pattern with index 175 "box" is re.compile('\\b(?i)(p\\.o\\.\\s)?box\\s\\d+\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 176 "room" is re.compile('\\b((?i)[A-Z]\\slevel(:)?\\s)?((?i)room(:)?\\s[a-z]+(\\-)?\\d+)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 177 "YYYY/MM-YYYY/MM" is re.compile('\\b\\d{4}[\\-/](0?[1-9]|1[0-2]|(J|j)an(uary)?|JAN(UARY)?|(F|f)eb(ruary)?|FEB(RUARY)?|(M|m)ar(ch)?|MAR(CH)?|(A|a)pr(il)?|APR(IL)?|May|MAY|(J|j)un(e)?|JUN(E)?|(J|j)ul(y)?|JUL(Y)?|(A|a)ug(ust)?|AUG(UST))
map_regex(): searching for pattern with index 178 "MM/DD/YY-MM/DD/YY" is re.compile('\\b(0?[1-9]|1[0-2]|(J|j)an(uary)?|JAN(UARY)?|(F|f)eb(ruary)?|FEB(RUARY)?|(M|m)ar(ch)?|MAR(CH)?|(A|a)pr(il)?|APR(IL)?|May|MAY|(J|j)un(e)?|JUN(E)?|(J|j)ul(y)?|JUL(Y)?|(A|a)ug(ust)?|AUG(UST)?|(S|s)ep(te)
map_regex(): searching for pattern with index 179 "MM/YYYY-MM/YYYY" is re.compile('\\b(0?[1-9]|1[0-2]|(J|j)an(uary)?|JAN(UARY)?|(F|f)eb(ruary)?|FEB(RUARY)?|(M|m)ar(ch)?|MAR(CH)?|(A|a)pr(il)?|APR(IL)?|May|MAY|(J|j)un(e)?|JUN(E)?|(J|j)ul(y)?|JUL(Y)?|(A|a)ug(ust)?|AUG(UST)?|(S|s)ep(te)
map_regex(): searching for pattern with index 180 "MM/YY-MM/YY" is re.compile('\\b(0?[1-9]|1[0-2]|(J|j)an(uary)?|JAN(UARY)?|(F|f)eb(ruary)?|FEB(RUARY)?|(M|m)ar(ch)?|MAR(CH)?|(A|a)pr(il)?|APR(IL)?|May|MAY|(J|j)un(e)?|JUN(E)?|(J|j)ul(y)?|JUL(Y)?|(A|a)ug(ust)?|AUG(UST)?|(S|s)ep(te)
map_regex(): searching for pattern with index 181 "MM/DD-MM/DD" is re.compile('\\b(0?[1-9]|1[0-2]|(J|j)an(uary)?|JAN(UARY)?|(F|f)eb(ruary)?|FEB(RUARY)?|(M|m)ar(ch)?|MAR(CH)?|(A|a)pr(il)?|APR(IL)?|May|MAY|(J|j)un(e)?|JUN(E)?|(J|j)ul(y)?|JUL(Y)?|(A|a)ug(ust)?|AUG(UST)?|(S|s)ep(te)
map_regex(): searching for pattern with index 182 "DD/MM-DD/MM" is re.compile('\\b([1-2][0-9]|3[0-1]|0?[1-9])/(0?[1-9]|1[0-2]|(J|j)an(uary)?|JAN(UARY)?|(F|f)eb(ruary)?|FEB(RUARY)?|(M|m)ar(ch)?|MAR(CH)?|(A|a)pr(il)?|APR(IL)?|May|MAY|(J|j)un(e)?|JUN(E)?|(J|j)ul(y)?|JUL(Y)?|(A|a)u)
map_regex(): searching for pattern with index 183 "day_name_dd_month_name_yy" is re.compile('\\b((S|s)un(day)?(s)?|SUN(DAY)?(S)?|(M|m)on(day)?(s)?|MON(DAY)?(S)?|(T|t)ues(day)?(s)?|Tue|TUES(DAY)?(S)?|(W|w)ed(nesday)?(s)?|WED(NESDAY)?(S)?|(T|t)hurs(day)?(s)?|Thu|THURS(DAY)?(S)?|(F|f)ri(day)?(s)
map_regex(): searching for pattern with index 184 "day_name_month_name_dd_yy" is re.compile('\\b((S|s)un(day)?(s)?|SUN(DAY)?(S)?|(M|m)on(day)?(s)?|MON(DAY)?(S)?|(T|t)ues(day)?(s)?|Tue|TUES(DAY)?(S)?|(W|w)ed(nesday)?(s)?|WED(NESDAY)?(S)?|(T|t)hurs(day)?(s)?|Thu|THURS(DAY)?(S)?|(F|f)ri(day)?(s)
map_regex(): searching for pattern with index 185 "day_name_month_name_dd_yyyy" is re.compile('\\b((S|s)un(day)?(s)?|SUN(DAY)?(S)?|(M|m)on(day)?(s)?|MON(DAY)?(S)?|(T|t)ues(day)?(s)?|Tue|TUES(DAY)?(S)?|(W|w)ed(nesday)?(s)?|WED(NESDAY)?(S)?|(T|t)hurs(day)?(s)?|Thu|THURS(DAY)?(S)?|(F|f)ri(day)?(s)
map_regex(): searching for pattern with index 186 "day_name_dd_month_name_yyyy" is re.compile('\\b((S|s)un(day)?(s)?|SUN(DAY)?(S)?|(M|m)on(day)?(s)?|MON(DAY)?(S)?|(T|t)ues(day)?(s)?|Tue|TUES(DAY)?(S)?|(W|w)ed(nesday)?(s)?|WED(NESDAY)?(S)?|(T|t)hurs(day)?(s)?|Thu|THURS(DAY)?(S)?|(F|f)ri(day)?(s)
map_regex(): searching for pattern with index 187 "day_name_month_name_dd" is re.compile('\\b((S|s)un(day)?(s)?|SUN(DAY)?(S)?|(M|m)on(day)?(s)?|MON(DAY)?(S)?|(T|t)ues(day)?(s)?|Tue|TUES(DAY)?(S)?|(W|w)ed(nesday)?(s)?|WED(NESDAY)?(S)?|(T|t)hurs(day)?(s)?|Thu|THURS(DAY)?(S)?|(F|f)ri(day)?(s)
map_regex(): searching for pattern with index 188 "day_name_dd_month_name" is re.compile('\\b((S|s)un(day)?(s)?|SUN(DAY)?(S)?|(M|m)on(day)?(s)?|MON(DAY)?(S)?|(T|t)ues(day)?(s)?|Tue|TUES(DAY)?(S)?|(W|w)ed(nesday)?(s)?|WED(NESDAY)?(S)?|(T|t)hurs(day)?(s)?|Thu|THURS(DAY)?(S)?|(F|f)ri(day)?(s)
map_regex(): searching for pattern with index 189 "dd_month_name_yy" is re.compile('\\b([1-2][0-9]|3[0-1]|0?[1-9])(\\-|\\/|\\.|\\:|\\s|\\,\\s|\\s\\,)((J|j)an(uary)?|JAN(UARY)?|(F|f)eb(ruary)?|FEB(RUARY)?|(M|m)ar(ch)?|MAR(CH)?|(A|a)pr(il)?|APR(IL)?|May|MAY|(J|j)un(e)?|JUN(E)?|(J|j)ul)
map_regex(): searching for pattern with index 190 "dd_month_name_yyyy" is re.compile('\\b([1-2][0-9]|3[0-1]|0?[1-9])(\\-|\\/|\\.|\\:|\\s|\\,\\s|\\s\\,)((J|j)an(uary)?|JAN(UARY)?|(F|f)eb(ruary)?|FEB(RUARY)?|(M|m)ar(ch)?|MAR(CH)?|(A|a)pr(il)?|APR(IL)?|May|MAY|(J|j)un(e)?|JUN(E)?|(J|j)ul)
map_regex(): searching for pattern with index 191 "dd_month_name" is re.compile('\\b([1-2][0-9]|3[0-1]|0?[1-9])(\\-|\\/|\\.|\\:|\\s|\\,\\s|\\s\\,)((J|j)an(uary)?|JAN(UARY)?|(F|f)eb(ruary)?|FEB(RUARY)?|(M|m)ar(ch)?|MAR(CH)?|(A|a)pr(il)?|APR(IL)?|May|MAY|(J|j)un(e)?|JUN(E)?|(J|j)ul)
map_regex(): searching for pattern with index 192 "month_name_dd_yy" is re.compile('\\b((J|j)an(uary)?|JAN(UARY)?|(F|f)eb(ruary)?|FEB(RUARY)?|(M|m)ar(ch)?|MAR(CH)?|(A|a)pr(il)?|APR(IL)?|May|MAY|(J|j)un(e)?|JUN(E)?|(J|j)ul(y)?|JUL(Y)?|(A|a)ug(ust)?|AUG(UST)?|(S|s)ep(tember)?|SEP(TEMB)
map_regex(): searching for pattern with index 193 "month_name_dd_yyyy" is re.compile('\\b((J|j)an(uary)?|JAN(UARY)?|(F|f)eb(ruary)?|FEB(RUARY)?|(M|m)ar(ch)?|MAR(CH)?|(A|a)pr(il)?|APR(IL)?|May|MAY|(J|j)un(e)?|JUN(E)?|(J|j)ul(y)?|JUL(Y)?|(A|a)ug(ust)?|AUG(UST)?|(S|s)ep(tember)?|SEP(TEMB)
map_regex(): searching for pattern with index 194 "yy_month_name_dd" is re.compile('\\b\\d{2}(\\-|\\/|\\.|\\:|\\,\\s|\\s\\,)((J|j)an(uary)?|JAN(UARY)?|(F|f)eb(ruary)?|FEB(RUARY)?|(M|m)ar(ch)?|MAR(CH)?|(A|a)pr(il)?|APR(IL)?|May|MAY|(J|j)un(e)?|JUN(E)?|(J|j)ul(y)?|JUL(Y)?|(A|a)ug(ust))
map_regex(): searching for pattern with index 195 "yyyy_month_name_dd" is re.compile('\\b\\d{4}(\\-|\\/|\\.|\\:|\\,\\s|\\s\\,)((J|j)an(uary)?|JAN(UARY)?|(F|f)eb(ruary)?|FEB(RUARY)?|(M|m)ar(ch)?|MAR(CH)?|(A|a)pr(il)?|APR(IL)?|May|MAY|(J|j)un(e)?|JUN(E)?|(J|j)ul(y)?|JUL(Y)?|(A|a)ug(ust))
map_regex(): searching for pattern with index 196 "yyyy_month_name" is re.compile('[^-/]\\b\\d{4}\\s((J|j)an(uary)?|JAN(UARY)?|(F|f)eb(ruary)?|FEB(RUARY)?|(M|m)ar(ch)?|MAR(CH)?|(A|a)pr(il)?|APR(IL)?|May|MAY|(J|j)un(e)?|JUN(E)?|(J|j)ul(y)?|JUL(Y)?|(A|a)ug(ust)?|AUG(UST)?|(S|s)ep(tem)
map_regex(): searching for pattern with index 197 "month_name_dd" is re.compile('\\b((J|j)an(uary)?|JAN(UARY)?|(F|f)eb(ruary)?|FEB(RUARY)?|(M|m)ar(ch)?|MAR(CH)?|(A|a)pr(il)?|APR(IL)?|May|MAY|(J|j)un(e)?|JUN(E)?|(J|j)ul(y)?|JUL(Y)?|(A|a)ug(ust)?|AUG(UST)?|(S|s)ep(tember)?|SEP(TEMB)
map_regex(): searching for pattern with index 198 "month_name" is re.compile('\\b((J|j)an(uary)?|JAN(UARY)?|(F|f)eb(ruary)?|FEB(RUARY)?|(M|m)ar(ch)?|MAR(CH)?|(A|a)pr(il)?|APR(IL)?|May|MAY|(J|j)un(e)?|JUN(E)?|(J|j)ul(y)?|JUL(Y)?|(A|a)ug(ust)?|AUG(UST)?|(S|s)ep(tember)?|SEP(TEMB)
map_regex(): searching for pattern with index 199 "ddmonth_nameyyyy.txt" is re.compile('([1-2][0-9]|3[0-1]|0?[1-9])((J|j)an(uary)?|JAN(UARY)?|(F|f)eb(ruary)?|FEB(RUARY)?|(M|m)ar(ch)?|MAR(CH)?|(A|a)pr(il)?|APR(IL)?|May|MAY|(J|j)un(e)?|JUN(E)?|(J|j)ul(y)?|JUL(Y)?|(A|a)ug(ust)?|AUG(UST)?|()
map_regex(): searching for pattern with index 200 "dd_mm_yyyy" is re.compile('((([1-2][0-9]|3[0-1]|0?[1-9])[\\-\\/\\:](0?[1-9]|1[0-2])[\\-\\/\\:]\\d{4})|(([1-2][0-9]|3[0-1]|0?[1-9])[\\.](0?[1-9]|1[0-2])[\\.]\\d{4}))')
map_regex(): searching for pattern with index 201 "mm_dd_yyyy" is re.compile('((0?[1-9]|1[0-2])[\\-\\.\\/\\:]([1-2][0-9]|3[0-1]|0?[1-9])[\\-.\\/\\:]\\d{4}|(0?[1-9]|1[0-2])[\\s]([1-2][0-9]|3[0-1]|0?[1-9])[\\s]\\d{4})')
map_regex(): searching for pattern with index 202 "dd_mm_yy" is re.compile('(([1-2][0-9]|3[0-1]|0?[1-9]|\\?)[\\/\\-](0?[1-9]|1[0-2]|\\?)[\\/\\-](\\d{2}|\\?)|([1-2][0-9]|3[0-1]|0?[1-9]|\\?)[\\-](0?[1-9]|1[0-2]|\\?)[\\-](\\d{2}|\\?))')
map_regex(): searching for pattern with index 203 "yy_mm_dd" is re.compile('\\b\\d{2}[\\-/](0?[1-9]|1[0-2])[\\-/]([1-2][0-9]|3[0-1]|0?[1-9])\\b')
map_regex(): searching for pattern with index 204 "mm_dd_yy" is re.compile('(((0?[1-9]|1[0-2]|\\?)[\\/\\-\\\\]{1,2}([1-2][0-9]|3[0-1]|0?[1-9]|\\?)[\\/\\-\\\\]{1,2}(\\.)?(\\d{2}|\\?)|(0?[1-9]|1[0-2]|\\?)[\\-]([1-2][0-9]|3[0-1]|0?[1-9]|\\?)[\\-](\\d{2}|\\?))|((0?[1-9]|1[0-2]|\)
map_regex(): searching for pattern with index 205 "yyyy_mm_dd" is re.compile('(\\d{4}[\\/-](0?[1-9]|1[0-2])[\\/-]([1-2][0-9]|3[0-1]|0?[1-9])|\\d{4}[\\-](0?[1-9]|1[0-2])[\\-]([1-2][0-9]|3[0-1]|0?[1-9]))')
map_regex(): searching for pattern with index 206 "mm_yyyy" is re.compile('(?<!\\/)\\b([a-zA-Z0]+)?(0?[1-9]|1[0-2])[\\-\\/\\s\\.]([ ]{1,2})?\\d{4}([a-zA-Z0]+)?\\b')
map_regex(): searching for pattern with index 207 "dd_mm" is re.compile('(?i)(?<!\\sscore\\s)(?<!\\spain:\\s)(?<!\\spain\\s)(?<!\\spain level\\s)(?<!\\spain score\\s)(?<!\\srated as\\s)(?<!\\srated a\\s)(?<!\\sup to\\s)(?<!\\sdown to\\s)(?<!\\sis\\s)(?<!\\scn\\s)(?<!\\sap, re.IGNORECASE)
map_regex(): searching for pattern with index 208 "mm_dd" is re.compile('(?i)(?<!\\sscore\\s)(?<!\\spain:\\s)(?<!\\spain\\s)(?<!\\spain level\\s)(?<!\\spain score\\s)(?<!\\srated as\\s)(?<!\\srated a\\s)(?<!\\sup to\\s)(?<!\\sdown to\\s)(?<!\\sis\\s)(?<!\\scn\\s)(?<!\\sap, re.IGNORECASE)
map_regex(): searching for pattern with index 209 "mm_yy" is re.compile('(([a-zA-Z]+)?(0?[1-9]|1[0-2])(\\/)([ ]{1,3})?\\d{2}([a-zA-Z]+)?)|((?<=\\bin\\b\\s)|(?<=\\bsince\\b\\s)|(?<=\\bin\\b\\s{2})|(?<=\\bsince\\b\\s{2}))(0?[1-9]|1[0-2])(\\-)([ ]{1,3})?\\d{2}([a-zA-Z]+)?\\b)
map_regex(): searching for pattern with index 210 "month_name_of_yy" is re.compile("\\b((J|j)an(uary)?|JAN(UARY)?|(F|f)eb(ruary)?|FEB(RUARY)?|(M|m)ar(ch)?|MAR(CH)?|(A|a)pr(il)?|APR(IL)?|May|MAY|(J|j)un(e)?|JUN(E)?|(J|j)ul(y)?|JUL(Y)?|(A|a)ug(ust)?|AUG(UST)?|(S|s)ep(tember)?|SEP(TEMB)
map_regex(): searching for pattern with index 211 "month_name_of_yyyy" is re.compile("\\b((J|j)an(uary)?|JAN(UARY)?|(F|f)eb(ruary)?|FEB(RUARY)?|(M|m)ar(ch)?|MAR(CH)?|(A|a)pr(il)?|APR(IL)?|May|MAY|(J|j)un(e)?|JUN(E)?|(J|j)ul(y)?|JUL(Y)?|(A|a)ug(ust)?|AUG(UST)?|(S|s)ep(tember)?|SEP(TEMB)
map_regex(): searching for pattern with index 212 "month_name_yy" is re.compile("\\b((J|j)an(uary)?|JAN(UARY)?|(F|f)eb(ruary)?|FEB(RUARY)?|(M|m)ar(ch)?|MAR(CH)?|(A|a)pr(il)?|APR(IL)?|May|MAY|(J|j)un(e)?|JUN(E)?|(J|j)ul(y)?|JUL(Y)?|(A|a)ug(ust)?|AUG(UST)?|(S|s)ep(tember)?|SEP(TEMB)
map_regex(): searching for pattern with index 213 "month_name_yyyy" is re.compile('\\b(((J|j)an(uary)?|JAN(UARY)?|(F|f)eb(ruary)?|FEB(RUARY)?|(M|m)ar(ch)?|MAR(CH)?|(A|a)pr(il)?|APR(IL)?|May|MAY|(J|j)un(e)?|JUN(E)?|(J|j)ul(y)?|JUL(Y)?|(A|a)ug(ust)?|AUG(UST)?|(S|s)ep(tember)?|SEP(TEM)
map_regex(): searching for pattern with index 214 "day_numbering_of_month" is re.compile('\\b(1st|2nd|3rd|4th|5th|6th|7th|8th|9th|10th|11th|12th|13th|14th|15th|16th|17th|18th|19th|20th|21st|22nd|23rd|24th|25th|26th|27th|28th|29th|30th|31st|32nd|33rd|34th|35th|36th|37th|38th|39th|40th|41st)
map_regex(): searching for pattern with index 215 "month_name_xst_xnd_xth" is re.compile('\\b((J|j)an(uary)?|JAN(UARY)?|(F|f)eb(ruary)?|FEB(RUARY)?|(M|m)ar(ch)?|MAR(CH)?|(A|a)pr(il)?|APR(IL)?|May|MAY|(J|j)un(e)?|JUN(E)?|(J|j)ul(y)?|JUL(Y)?|(A|a)ug(ust)?|AUG(UST)?|(S|s)ep(tember)?|SEP(TEMB)
map_regex(): searching for pattern with index 216 "on_or_by_the_day_numbering" is re.compile('(?<=\\bby\\sthe\\s|\\bon\\sthe\\s)(1st|2nd|3rd|4th|5th|6th|7th|8th|9th|10th|11th|12th|13th|14th|15th|16th|17th|18th|19th|20th|21st|22nd|23rd|24th|25th|26th|27th|28th|29th|30th|31st|32nd|33rd|34th|35t)
map_regex(): searching for pattern with index 217 "as of date" is re.compile('\\b(?<=(?i)as of )\\d+\\/\\d+\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 218 "season of yyyy" is re.compile("\\b((S|s)pring|SPRING|(F|f)all|FALL|(A|a)utumn|AUTUMN|(W|w)inter|WINTER|(S|s)ummer|SUMMER|(C|c)hristmas|(N|n)ew (Y|y)ear's (E|e)ve)\\s(of\\s)?(\\')?\\d{4}\\b")
map_regex(): searching for pattern with index 219 "season of yy" is re.compile("\\b((S|s)pring|SPRING|(F|f)all|FALL|(A|a)utumn|AUTUMN|(W|w)inter|WINTER|(S|s)ummer|SUMMER|(C|c)hristmas|(N|n)ew (Y|y)ear's (E|e)ve)(\\s(of\\s)?(\\')?\\d{2})?\\b")
map_regex(): searching for pattern with index 220 "model number" is re.compile('\\b([A-Z]{2}\\-([A-Z])?\\d{3,4}([a-zA-Z]{1,3})?(\\d{1,2})?(\\s?\\-\\s?\\d{2})?|[A-Z]{3}\\-[A-Z]\\d{3}[A-Z]?(\\s?\\-\\s?\\d{2})?|[A-Z]{2,3}\\s\\d+(?=\\spacemaker))\\b')
map_regex(): searching for pattern with index 221 "lot #" is re.compile('\\b((?i)lot #\\s?(: )?)[a-zA-Z0-9]+(\\-[a-zA-Z0-9]+)?\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 222 "id verbose" is re.compile('\\b((?<=(?i)id: )|(?<=(?i)id#: )|(?<=(?i)AARP#:  )|(?<=(?i)AARP#: )|(?<=(?i)CIM # )|(?<=(?i)subscriber info: ))[a-zA-Z0-9]+\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 223 "activation code" is re.compile('\\b(?<=(?i)activation code: )[a-zA-Z0-9]+\\-[a-zA-Z0-9]+\\-[a-zA-Z0-9]+\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 224 "six or more digits" is re.compile('(\\d\\-)?\\d{5,15}(\\s[A-Z]{2}|(\\s)?\\-\\d+|\\s\\d{3,}|\\s+\\d[A-Z])?\\b')
map_regex(): searching for pattern with index 225 "order number" is re.compile('\\b(?i)order[ ]{1,3}number[ ]{1,3}\\d+\\/\\d+\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 226 "specimen number" is re.compile('\\b(?i)(?<=specimen )(no|\\#)(\\.)?([ ]{1,2})?[a-zA-Z0-9]+\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 227 "cassette_#" is re.compile('\\b((?i)(?<=cassette )((no)?(\\.)?[a-zA-Z0-9]+)|(?i)(?<=cassettes )((no)?(\\.)?[a-zA-Z0-9]+)(((\\,)?[ ]{1,2}(no)?(\\.)?([ ]{1,2})?[a-zA-Z0-9]+)+(\\,)?[ ]and[ ][a-zA-Z0-9]+))\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 228 "# reviewed by" is re.compile('(?i)([0-9][ ]){5}(?=reviewed[ ]by)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 229 "account #" is re.compile('\\b[A-Z]\\d{3,}(\\-[0-9])?\\b')
map_regex(): searching for pattern with index 230 "accession #" is re.compile('\\b(?<=(?i)accession #: )[a-zA-Z0-9]+(\\-[a-zA-Z0-9]+){1,}\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 231 "tape number" is re.compile('\\b(?<=(?i)tape number: )[a-zA-Z0-9]+(\\-[a-zA-Z0-9]+)?\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 232 "CCC-DD-DDDDD" is re.compile('\\b[A-Z]{3}\\-\\d{2}\\-\\d{5}\\b')
map_regex(): searching for pattern with index 233 "CCDDDD-D-CC" is re.compile('\\b[A-Z]{2}\\d{4}\\-\\d\\-[A-Z]{2}\\b')
map_regex(): searching for pattern with index 234 "DDCCCDDD" is re.compile('\\b\\d{2}[A-Z]{3}\\d{3}\\b')
map_regex(): searching for pattern with index 235 "CCDDD_DDD" is re.compile('[a-zA-Z]{2}\\d{3}.?\\d{2,}')
map_regex(): searching for pattern with index 236 "DDDD_DDDD-DD" is re.compile('\\b\\d{4}\\/\\d{4}\\-\\d{2}\\b')
map_regex(): searching for pattern with index 237 "DDDD_DDD" is re.compile('\\b\\d{4}\\-\\d{3}\\b')
map_regex(): searching for pattern with index 238 "CDD_DDDD+" is re.compile('\\b[A-Z]{1,2}(\\-)?\\d{2}[\\-]\\d{3,}\\b')
map_regex(): searching for pattern with index 239 "mixed 2" is re.compile('\\b(?!QTY|qty|RF|rf|RFL|rfl|Rf)([a-zA-Z]{2,3}\\:)?[a-zA-Z]{2,3}(\\:\\d+([ ]+)?){1,}\\b')
map_regex(): searching for pattern with index 240 "mixed 3" is re.compile('\\b\\d{4,}(?!mg|MG|cc|CC|s)[a-zA-Z]+(\\/\\d+)?\\b')
map_regex(): searching for pattern with index 241 "mixed 4" is re.compile('\\b(?!QTY|qty|RF|rf|RFL|rfl|Rf|SaO|SpO|MvO|SAO|FEV|FIO|FIF|fiO|FiO|FEF|HCO|MSO|PCO|AOx)[a-zA-Z]{3}(\\:)?\\d+\\b')
map_regex(): searching for pattern with index 242 "mixed 5" is re.compile('\\b(?!((H|h)(((B|b)|(G|g))|(G|g)(B|b))(A|a)1(C|c)))([a-zA-Z]{2,}(\\:)?\\d+(\\:)?[a-zA-Z]+)\\b')
map_regex(): searching for pattern with index 243 "mixed 6" is re.compile('\\b(\\d+\\:)?[a-zA-Z]+(\\:)?\\d{3,}(\\:)?[a-zA-Z]+\\b')
map_regex(): searching for pattern with index 244 "mixed 7" is re.compile('\\b[a-zA-Z]+((\\:|\\;|\\-)\\d+){3,}?\\b')
map_regex(): searching for pattern with index 245 "mixed 8" is re.compile('\\b(([a-zA-Z]+|\\d+)(\\:|\\-)){5,}([a-zA-Z]+|\\d+)\\b')
map_regex(): searching for pattern with index 246 "mixed 10" is re.compile('\\b(\\d+[a-zA-Z]+\\d+[a-zA-Z]+(\\d+)?([a-zA-Z]+)?){1,}\\b')
map_regex(): searching for pattern with index 247 "CCCDDD" is re.compile('\\b(?!QTY|qty|RF|rf|RFL|rfl|Rf)[a-zA-Z]{3}(\\:)?\\d{3}\\b')
map_regex(): searching for pattern with index 248 "visit code" is re.compile('\\b[A-Z]\\d{2}\\-\\d{2}\\b')
map_regex(): searching for pattern with index 249 "DDDDCDDDDD" is re.compile('\\b(\\d{4}[a-zA-Z]\\d{4,5}|\\d{8,9}[a-z]\\d|\\d[a-zA-Z]{2}\\d[a-zA-Z]{2}\\d[a-zA-Z]{2}\\d{2}|\\d{5}[a-z]\\d{3})\\b')
map_regex(): searching for pattern with index 250 "DDD-DD-DD" is re.compile('\\b\\d{3}(\\-|\\s)\\d{2}(\\-|\\s)\\d{2}((\\-|\\s)\\d)?\\b')
map_regex(): searching for pattern with index 251 "DD-DD-DD-DD" is re.compile('\\b\\d+(\\-)\\d+(\\-)\\d+((\\-)\\d+)?\\b')
map_regex(): searching for pattern with index 252 "DD-DDDDDC" is re.compile('\\b\\d{2}(\\-|\\s)\\d{5}[a-zA-Z]\\b')
map_regex(): searching for pattern with index 253 "DD-CDD-DDDD" is re.compile('(\\b\\d+|\\(\\d{2}\\))\\-[A-Z]\\d{2}\\-\\d{4}\\b')
map_regex(): searching for pattern with index 254 "****DC" is re.compile('(\\*{1,12}(\\:|\\-){0,12}\\*{1,12})(\\s)+(\\:)+(\\s)*[A-Za-z0-9]+')
map_regex(): searching for pattern with index 255 "model and serial numbers" is re.compile('\\b((M|m)odel|(S|s)erial)\\s+\\#(\\s+)?\\d+\\b')
map_regex(): searching for pattern with index 256 "ssn only" is re.compile('\\b(\\d{3}\\-\\d{2}\\-\\d{4}|((?i)xxx\\-xx\\-\\d{4}))\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 257 "file indicator" is re.compile('\\b(?i)((?<=\\bfile\\s)|(?<=file:\\s))(?!\\bprior\\b)[^\\s]+\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 258 "url" is re.compile('\\b((http(s)?:\\/\\/)?(www\\.)?[^\\s]+\\.(com|org|gov|edu|net))(\\/[^\\s\\\\]+)?\\b')
map_regex(): searching for pattern with index 259 "call #" is re.compile('\\b((?<=(?i)call: )|(?<=(?i)phone: )|(?<=(?i)telephone\\snumber\\sis\\s))\\d+[\\-\\s]\\d+([\\-\\s]\\d+)?\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 260 "emails" is re.compile('[a-zA-Z0-9_.+-@\\"]+@[a-zA-Z0-9-\\:\\]\\[]+[a-zA-Z0-9-.]*')
map_regex(): searching for pattern with index 261 "xxx_xxx_xxxx" is re.compile('(\\b\\d(\\-|\\s|\\.))?(\\b\\d{3}\\s?[\\s\\-\\.]?\\s?|\\(\\d{3}\\)[\\s\\-\\.]?\\s?)?\\b([a-zA-Z])?\\d{3,4}[\\s\\-\\.](\\d{3,4}|xxxx|xxx|\\*\\*\\*\\*|\\*\\*\\*)(\\/\\d{4})?')
<re.Match object; span=(4, 17), match='(111)222-3333'>
map_regex(): searching for pattern with index 262 "xxx_xxx_CCCC" is re.compile('(\\b\\d\\-)?(\\b\\d{3}\\-|[\\[\\(]\\d{3}[\\]\\)]\\s)?\\b\\d{3}\\-[a-zA-Z]+\\b(\\s[\\[\\(]\\d{4}[\\]\\)]|\\-[a-zA-Z]+)?')
map_regex(): searching for pattern with index 263 "5 digit pager" is re.compile('\\b(\\d{5}|\\d{1}\\-\\d{4}|[A-Z]{2}\\d{2,3}|[A-Z]{2}\\/\\d{4})\\b')
map_regex(): searching for pattern with index 264 "lived to x" is re.compile('(?i)\\b((?<=lived to\\s)|(?<=she was\\s)|(?<=he was\\s))([9][0-9]|[1][0-9][0-9]|ninety|ninety(\\s|\\-)("""+ones+r""")|one hundred ("""+ones+r""")|one hundred ("""+teens+r""")|one hundred ("""+decades, re.IGNORECASE)
map_regex(): searching for pattern with index 265 "x years old" is re.compile('(?i)\\b([9][0-9]|[1][0-9][0-9]|ninety|ninety(\\s|\\-)("""+ones+r""")|one hundred ("""+ones+r""")|one hundred ("""+teens+r""")|one hundred ("""+decades_lt_90+r""")|one hundred ("""+decades_lt_90+r"""), re.IGNORECASE)
map_regex(): searching for pattern with index 266 "x year old" is re.compile('\\b(?i)([9][0-9]|[1][0-9][0-9]|ninety|ninety(\\s|\\-)("""+ones+r""")|one hundred ("""+ones+r""")|one hundred ("""+teens+r""")|one hundred ("""+decades_lt_90+r""")|one hundred ("""+decades_lt_90+r"""), re.IGNORECASE)
map_regex(): searching for pattern with index 267 "age x" is re.compile('(?i)\\b(((?<=age\\s)|(?<=age:\\s)|(?<=age:\\s\\s)|(?<=age/sex:\\s)|(?<=ages\\s))([9][0-9]|[1][0-9][0-9]|ninety|ninety(\\s|\\-)("""+ones+r""")|one hundred ("""+ones+r""")|one hundred ("""+teens+r""")|, re.IGNORECASE)
map_regex(): searching for pattern with index 268 "x yo" is re.compile('(?i)\\b([9][0-9]|[1][0-9][0-9]|ninety|ninety(\\s|\\-)("""+ones+r""")|one hundred ("""+ones+r""")|one hundred ("""+teens+r""")|one hundred ("""+decades_lt_90+r""")|one hundred ("""+decades_lt_90+r"""), re.IGNORECASE)
map_regex(): searching for pattern with index 269 "confirmed by name" is re.compile('\\b((?<=(?i)confirmed\\sby\\s)|(?<=(?i)called\\sby\\s)|(?<=(?i)signed\\sby\\:\\s)|(?<=(?i)printed\\sby\\s)|(?<=(?i)copied\\sby\\s)|(?<=(?i)performed\\sby:\\s))[A-Z][a-zA-Z]+(\\s[A-Z]{1,2}(\\.)?)?(\\,, re.IGNORECASE)
map_regex(): searching for pattern with index 270 "editor name" is re.compile('\\b(?<=(?i)editor\\s)[A-Z][a-zA-Z]+(\\,)?\\s[A-Z][a-zA-Z]+\\s\\(\\d+\\)', re.IGNORECASE)
map_regex(): searching for pattern with index 271 "code status name" is re.compile('\\b(?<=Code\\sStatus\\:\\sFULL\\s)[A-Z][a-zA-Z]+(\\s[A-Z][a-zA-Z]+){1,2}\\b(((?i)(\\,)?\\sjr\\.)?)', re.IGNORECASE)
map_regex(): searching for pattern with index 272 "attending" is re.compile('(?i)(\\b(((?<=attending\\s)|(?<=attending:\\s)|(?<=attd\\.\\s)|(?<=fellow:\\s)|(?<=fellow:[ ]{2}))(Dr\\.\\s)?((?!.*M\\.D\\.)([a-zA-Z]+(\\-[a-zA-Z]+)?(\\s[A-Z](\\.)?)?(\\,)?[ ]{1,2}[a-zA-Z]+(\\s[A-Z](, re.IGNORECASE)
map_regex(): searching for pattern with index 273 "u_#_patient" is re.compile("\\b(?<=U[ ]#:[ ]\\d{8}[ ])([A-Z]\\')?[A-Z][a-zA-Z]+((\\-|\\s)[A-Z][a-zA-Z]+)?\\,[ ]([A-Z]\\s)?[A-Z][a-zA-Z]+((\\-|\\s)[A-Z][a-zA-Z]+)?(\\s[A-Z](\\.)?)?\\b")
map_regex(): searching for pattern with index 274 "patient mrn" is re.compile('(\\b([A-Z][a-zA-Z]+\\s)?[A-Z][a-zA-Z]+(\\,)?\\s?[A-Z][a-zA-Z]+(\\s[A-Z]\\.?)?\\b((?=(\\,)?\\s{1,3}\\d{6,})|(?=\\sMRN\\:\\s?\\d+)|(\\s[a-zA-Z]+MRN\\:\\s?\\d+)|(\\s\\(MRN\\s\\d+\\))|(?=\\s{5}I\\.D\\.\\)
map_regex(): searching for pattern with index 275 "name_age" is re.compile('\\b((?i)(?!\\bpatient\\b)(?!\\bhe\\b)(?!\\bshe\\b)([A-Z][a-zA-Z]{1,20}\\-)?([A-Z][a-zA-Z]{1,20}(\\s)?){1,2}([A-Z](\\.)?\\s)?(Van\\s|De\\s)?([A-Z][a-zA-Z]{1,20}(\\s)?){1,2})((?=(?i)\\s{1,2}is\\s{1,2}a, re.IGNORECASE)
map_regex(): searching for pattern with index 276 "patient/provider" is re.compile('\\b(?!Belongings\\s[a-zA-z]+)(?!Instructions\\s[a-zA-z]+)(((?<=\\b[P|p]atient[:\\,]\\s)|(?<=\\b[P|p]atient[:])|(?<=\\b[P|p]atient\\s)|(?<=\\bcare\\sof\\s)|(?<=\\b[P|r]rovider[:\\,]\\s)|(?<=\\b[P|p]hy)
map_regex(): searching for pattern with index 277 "patient summary" is re.compile('\\b(?!Information\\s[a-zA-z]+\\b)(((?<=Visit\\sSummary\\s)|(?<=Visit\\sSummary\\s{10})|(?<=Visit\\sSummary\\s{11})|(?<=Assessment\\s&\\sPlan\\s)|(?<=Assessment\\s&\\sPlan\\:\\s{5})|(?<=Assessment\\sa)
map_regex(): searching for pattern with index 278 "wrote" is re.compile('\\b([A-Z][a-zA-Z]+(\\,)?([ ]{1,2})?[A-Z][a-zA-Z]+([ ]{1,2}[A-Z])?)(?=\\s(?i)wrote)\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 279 "salutations1" is re.compile("((?<=\\bDr\\s|\\bDR\\s|\\bMr\\s|\\bMR\\s|\\bMs\\s|\\bMS\\s)|(?<=\\bMD:\\s))(([A-Z](\\s|\\.\\s))?[A-Z]\\'?[A-Z]?[\\-aA-zZ]+((\\,)?((\\s)?[A-Z]\\'?[A-Z]?[\\-aA-zZ]+){1,2}(\\s[A-Z](\\.)?)?)?)\\b")
map_regex(): searching for pattern with index 280 "salutations2" is re.compile("(?<=\\bDr\\.\\s|\\bDR\\.\\s|\\bMr\\.\\s|\\bMR\\.\\s|\\bMs\\.\\s|\\bMS\\.\\s|\\bSir\\s|\\bSIR\\s|\\bMrs\\s|\\bMRS\\s)(([A-Z](\\s|\\.\\s))?([A-Z]\\')?[A-Z]?[\\-aA-zZ]+(\\s[A-Z](\\.)?)?(\\s[A-Z]\\'?[A-Z)
map_regex(): searching for pattern with index 281 "salutations3" is re.compile("(?<=Mrs\\.\\s|MRS\\.\\s|Miss\\s|MISS\\s|Dear\\s|DEAR\\s|\\bDr\\.\\s\\s|\\bDR\\.\\s\\s|\\bMr\\.\\s\\s|\\bMR\\.\\s\\s|\\bMs\\.\\s\\s|\\bMS\\.\\s\\s|\\bSir\\s\\s|\\bSIR\\s\\s|\\bMrs\\s\\s|\\bMRS\\s\\s)()
map_regex(): searching for pattern with index 282 "salutations4" is re.compile("(?<=Madam\\s|MADAM\\s)(([A-Z](\\s|\\.\\s))?[A-Z]\\'?[A-Z]?[\\-aA-zZ]+(\\s[A-Z]\\'?[A-Z]?[\\-aA-zZ]+)*)")
map_regex(): searching for pattern with index 283 "Md PhD" is re.compile("\\b(([A-Z]\\.\\s)?[A-Z]\\'?[A-Z]?[\\-aA-zZ]{1,20}(\\,)?(\\s[A-Z]{1,2}(.)?)?(\\s[A-Z]{1,2}(.)?)?((\\s)?[A-Z]\\'?[A-Z]?[\\-aA-zZ]{1,20}){1,2}(\\s[A-Z]{1,2}(.)?)?|[A-Z]\\.\\s[a-zA-Z]{1,20})((?=(\\s|\\,\)
map_regex(): searching for pattern with index 284 "salutations5" is re.compile("\\b(?<!M\\.)(([A-Z]\\.\\s)?[A-Z]\\'?[A-Z]?[\\-aA-zZ]+(\\,)?(\\s[A-Z]{1,2}(.)?)?(\\s[A-Z]{1,2}(.)?)?(\\s[A-Z]\\'?[A-Z]?[\\-aA-zZ]+){1,2}(\\s[A-Z]{1,2}(.)?)?|[A-Z]\\.\\s[a-zA-Z]+)((?=(\\s|\\,\\s|\\,)(M)
map_regex(): searching for pattern with index 285 "salutations6" is re.compile("\\b[A-Z]\\'?\\.?\\s?[A-Z]?[\\-aA-zZ]?\\,?(\\sJr\\.)?(?=\\sM\\.D\\b|\\sMD\\.|\\sN\\.P\\b|\\sNP\\.|\\sD\\.O\\b|\\sDO\\.|\\sR\\.N\\b|\\sRN\\.|\\sMSN\\b|\\sRNC\\b|\\sDPM\\b|\\sLVN\\b|\\sSLP\\b|\\sJr\\.)")
map_regex(): searching for pattern with index 286 "salutations7" is re.compile("\\b[A-Z]\\'?\\.?\\s?[A-Z]?[\\-aA-zZ]?\\,?(\\sJr|\\sSr)?(?=(\\s|\\,\\s)M\\.D\\.|(\\s|\\,\\s)N\\.P\\.|(\\s|\\,\\s)D\\.O\\.|(\\s|\\,\\s)R\\.N\\.|(\\,\\s)your|(\\,\\s)Jr|(\\,\\s)Sr)\\b")
map_regex(): searching for pattern with index 287 "names patterns" is re.compile("\\b((O\\'[A-Z][aA-zZ]+|[A-Z][aA-zZ]+\\s(van|Van|VAN|de|la|La|LA)\\s[A-Z][aA-zZ]+)|[A-Z][aA-zZ]+\\-[aA-zZ]+\\,\\s[A-Z][aA-zZ]+)\\b")
map_regex(): searching for pattern with index 288 "ordering md" is re.compile('((?i)((?<=ordering\\smd:\\s)|(?<=referring\\smd:\\s)|(?<=reviewing\\smd:\\s)|(?<=radiologist:\\s)|(?<=reviewed\\sby:\\s)|(?<=created\\sby:\\s)|(?<=requested\\sby:\\s)|(?<=appointment\\swith\\s)))(([A, re.IGNORECASE)
map_regex(): searching for pattern with index 289 "name indicator" is re.compile('\\b((?i)((?<=(?i)\\bname:)|(?<=(?i)\\bname:\\s)|(?<=(?i)\\bname\\/mrn:\\s)|(?<=(?i)\\bname:\\s{2})|(?<=(?i)\\bname:\\s{3})|(?<=(?i)\\bname:\\s{4})|(?<=(?i)\\bname:\\s{5})|(?<=(?i)\\bname:\\s{6})|(?<=, re.IGNORECASE)
map_regex(): searching for pattern with index 290 "relative indicator" is re.compile('\\b(((?<=Emergency\\sContact\\:\\s)|(?<=wife\\s)|(?<=wife\\,\\s)|(?<=husband\\s)|(?<=husband\\,\\s)|(?<=mother\\s)|(?<=mother\\,\\s)|(?<=father\\s)|(?<=father\\,\\s)|(?<=son\\s)|(?<=son\\,\\s)|(?<=da)
map_regex(): searching for pattern with index 291 "dr ambiguous" is re.compile("\\b(?i)(?<!capsule dr\\s)(?<!tablet dr\\s)(?<=\\bdr\\s)([A-Z](\\s|\\.\\s))?[A-Z]\\'?[A-Z]?[\\-aA-zZ]+\\b", re.IGNORECASE)
map_regex(): searching for pattern with index 292 "dash doctor" is re.compile('(_){10,}\\s[A-Z][a-zA-Z]+(\\-[a-zA-Z]+)?(\\,)?[ ]{1,2}[A-Z][a-zA-Z]+\\b')
map_regex(): searching for pattern with index 293 "patient present" is re.compile('\\b((?<=Present:\\s)|(?<=Present:\\sYoung\\sAdult\\,\\s))\\b([A-Z][a-zA-Z]+\\s){1,2}([A-Z]\\s)?([A-Z][a-zA-Z]+\\s){1,2}')
map_regex(): searching for pattern with index 294 "patient measurements" is re.compile('\\b([A-Z][a-zA-Z]+\\s){1,2}([A-Z]\\s)?([A-Z][a-zA-Z]+\\s){1,2}(?=is\\s\\d{1,2}\\sinches)\\b')
map_regex(): searching for pattern with index 295 "patholigist" is re.compile('\\b([A-Z][a-zA-Z]+\\s){1,2}([A-Z]\\s)?([A-Z][a-zA-Z]+(\\s)?){1,2}(?=\\/Pathologist|\\/Pathology\\sResident)')
map_regex(): searching for pattern with index 296 "email header" is re.compile('((?<=\\bCc\\:\\s|\\bcc\\:\\s|\\bRE\\:\\s)|(?<=\\bTo\\:\\s)|(?<=\\bRE\\:)|(?<=\\bRE\\:\\s{2})|(?<=\\bRE\\:\\s{3})|(?<=\\bRE\\:\\s{4}))((\\")?[A-Z][a-zA-Z]+(\\,)?(\\-)?(\\s[A-Z]\\.)?(\\s)?[A-Z][a-zA-Z])
map_regex(): searching for pattern with index 297 "by doctor number" is re.compile('\\b(?<=by\\s)([A-Z]\\s[A-Z][a-z]+|[A-Z][a-z]+(\\sM\\.D\\.)(\\,)?\\s[A-Z][a-z]+(\\s[A-Z][a-z]+)?)\\s(\\[|\\()\\d+(\\)|\\])')
map_regex(): searching for pattern with index 298 "sent note to" is re.compile('\\b(?i)(?<=sent\\snote\\sto\\s)[A-Z][a-zA-Z]+(\\sat\\s[A-Z][a-zA-Z]+)?\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 299 "sincerely" is re.compile('\\bSincerely\\,\\s{1,3}[A-Z][a-z]+(\\s[A-Z](\\.)?)?(\\s[A-Z][a-z]+){1,2}\\b')
map_regex(): searching for pattern with index 300 "ucsf SF" is re.compile('\\bSF\\b')
map_regex(): searching for pattern with index 301 "ucsf bay area" is re.compile('\\b(?i)bay\\sarea\\b', re.IGNORECASE)
map_regex(): searching for pattern with index 302 "ucsf neighborhoods" is re.compile("\\b((?i)alamo\\ssquare|anza\\svista|ashbury\\sheights|balboa\\spark|balboa\\sterrace|bayview|belden\\splace|bernal\\sheights|buena\\svista|butchertown|castro|cathedral\\shill|cayuga\\sterrace|china\\, re.IGNORECASE)
Coordinates Identified
Pos_tags identified
detecting PHI types
normalizing PHI
transforming texts
saving de-identified texts
WARNING: no surrogate info provided, saving output with identified note key
Successfully parsed: 0 dates.
Failed to parse: 0 dates.
